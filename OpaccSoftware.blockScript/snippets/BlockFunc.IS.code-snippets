{
	"BLOCKFUNC: IS.AddArg":	{
		"prefix":	"üîê  BlockFunc.IS.AddArg",
		"description":	["IBOS-Argument hinzuf√ºgen."],
		"body":	[
			"IS.AddArg(${2:ibosArg})",		]
	},
	"BLOCKFUNC: IS.AddArgs":	{
		"prefix":	"üîê  BlockFunc.IS.AddArgs",
		"description":	["IBOS-Argumente hinzuf√ºgen."],
		"body":	[
			"IS.AddArgs(${2:ibosArgs})",		]
	},
	"BLOCKFUNC: IS.AppendArg":	{
		"prefix":	"üîê  BlockFunc.IS.AppendArg",
		"description":	["Wert zum letzten IBOS-Argument hinzuf√ºgen. Fehler, wenn noch kein Argument vorhanden ist."],
		"body":	[
			"IS.AppendArg(${2:argValueToAppend})",		]
	},
	"BLOCKFUNC: IS.AppendArgByNo":	{
		"prefix":	"üîê  BlockFunc.IS.AppendArgByNo",
		"description":	["Wert zu einem bestimmten IBOS-Argument (identifiziert anhand Nummer) hinzuf√ºgen. Fehler, wenn Argument noch nicht vorhanden ist."],
		"body":	[
			"IS.AppendArgByNo(${2:oneBasedArgNo}, ${3:argValueToAppend})",		]
	},
	"BLOCKFUNC: IS.Clear":	{
		"prefix":	"üîê  BlockFunc.IS.Clear",
		"description":	["IS-Objekt zur√ºcksetzen."],
		"body":	[
			"IS.Clear()",		]
	},
	"BLOCKFUNC: IS.Execute":	{
		"prefix":	"üîê  BlockFunc.IS.Execute",
		"description":	["IBOS ausf√ºhren, IBOS-R√ºckgabe (falls vorhanden) als R√ºckgabewert (ansonsten Leerstring). Falls isTest=true, nur Argumentenpr√ºfung."],
		"body":	[
			"\tvar ${1:stringVal} := IS.Execute(${2:isTest})",		]
	},
	"BLOCKFUNC: IS.GetArgByNo":	{
		"prefix":	"üîê  BlockFunc.IS.GetArgByNo",
		"description":	["Liefert den Wert eines bestimmten Arguments. Fehler, wenn Argument nicht vorhanden ist."],
		"body":	[
			"\tvar ${1:stringVal} := IS.GetArgByNo(${2:oneBasedArgNo})",		]
	},
	"BLOCKFUNC: IS.GetIbos":	{
		"prefix":	"üîê  BlockFunc.IS.GetIbos",
		"description":	["Aktuell gesetzten IBOS-Namen abholen."],
		"body":	[
			"\tvar ${1:stringVal} := IS.GetIbos()",		]
	},
	"BLOCKFUNC: IS.GetIbosAndArgs":	{
		"prefix":	"üîê  BlockFunc.IS.GetIbosAndArgs",
		"description":	["Aktuell gesetzten IBOS-Aufruf mit dem Namen und den √ºbergebenen Argumenten abholen."],
		"body":	[
			"\tvar ${1:stringVal} := IS.GetIbosAndArgs()",		]
	},
	"BLOCKFUNC: IS.GetMsgKey":	{
		"prefix":	"üîê  BlockFunc.IS.GetMsgKey",
		"description":	["Liefert Meldungs-Schl√ºssel."],
		"body":	[
			"\tvar ${1:stringVal} := IS.GetMsgKey()",		]
	},
	"BLOCKFUNC: IS.GetMsgText":	{
		"prefix":	"üîê  BlockFunc.IS.GetMsgText",
		"description":	["Liefert Meldungs-Schl√ºssel."],
		"body":	[
			"\tvar ${1:stringVal} := IS.GetMsgText()",		]
	},
	"BLOCKFUNC: IS.GetOk":	{
		"prefix":	"üîê  BlockFunc.IS.GetOk",
		"description":	["Liefert Info, ob IBOS-Ausf√ºhrung erfolgreich war."],
		"body":	[
			"\tvar ${1:boolVal} := IS.GetOk()",		]
	},
	"BLOCKFUNC: IS.IsDefined":	{
		"prefix":	"üîê  BlockFunc.IS.IsDefined",
		"description":	["Ermittelt, ob ein IBOS definiert wurde."],
		"body":	[
			"\tvar ${1:boolVal} := IS.IsDefined()",		]
	},
	"BLOCKFUNC: IS.SetArgByNo":	{
		"prefix":	"üîê  BlockFunc.IS.SetArgByNo",
		"description":	["Bestimmtes IBOS-Argument (identifiziert anhand Nummer) setzen."],
		"body":	[
			"IS.SetArgByNo(${2:oneBasedArgNo}, ${3:argValue})",		]
	},
	"BLOCKFUNC: IS.SetArgs":	{
		"prefix":	"üîê  BlockFunc.IS.SetArgs",
		"description":	["IBOS-Argumente setzen. Allf√§llig vormals vorhandene Argumente werden zur√ºckgesetzt."],
		"body":	[
			"IS.SetArgs(${2:ibosArgs})",		]
	},
	"BLOCKFUNC: IS.SetIbos":	{
		"prefix":	"üîê  BlockFunc.IS.SetIbos",
		"description":	["IBOS-Name f√ºr den IBOS-Aufruf setzen. Es kann definiert werden, ob vormals vorhandene Argumente erhalten bleiben sollen."],
		"body":	[
			"IS.SetIbos(${2:ibosName}, ${3:clearArgs})",		]
	},
	"BLOCKFUNC: IS.SetIbosAndArgs":	{
		"prefix":	"üîê  BlockFunc.IS.SetIbosAndArgs",
		"description":	["IBOS-Name f√ºr den IBOS-Aufruf und IBOS-Argumente setzen. Allf√§llig vormals vorhandene Argumente werden zur√ºckgesetzt."],
		"body":	[
			"IS.SetIbosAndArgs(${2:ibosName}, ${3:ibosArgs})",		]
	},
	"BLOCKFUNC: IS.SuppressExceptions":	{
		"prefix":	"üîê  BlockFunc.IS.SuppressExceptions",
		"description":	["Fehler f√ºhren nicht zu einem Script-Abbruch. Fehler-Infos k√∂nnen via 'GetOk', 'GetMsgKey' und 'GetMsgText' abgeholt werden. Wird nicht via 'IS.Clear()' zur√ºckgesetzt."],
		"body":	[
			"IS.SuppressExceptions(${2:suppressException})",		]
	},
}
