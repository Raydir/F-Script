{
	"BLOCKFUNC: READ.All":	{
		"prefix":	"üîê  BlockFunc.READ.All",
		"description":	["Liefert den gesamten Inhalt einer ge√∂ffneten Datei."],
		"body":	[
			"\tvar ${1:stringVal} := READ.All(${2:channelNo})",		]
	},
	"BLOCKFUNC: READ.Close":	{
		"prefix":	"üîê  BlockFunc.READ.Close",
		"description":	["Ge√∂ffneten Eingabekanal schliessen."],
		"body":	[
			"READ.Close(${2:channelNo})",		]
	},
	"BLOCKFUNC: READ.GetSize":	{
		"prefix":	"üîê  BlockFunc.READ.GetSize",
		"description":	["Liefert Gr√∂sse der Datei in Anzahl Bytes."],
		"body":	[
			"\tvar ${1:numberVal} := READ.GetSize(${2:channelNo})",		]
	},
	"BLOCKFUNC: READ.IsAtEnd":	{
		"prefix":	"üîê  BlockFunc.READ.IsAtEnd",
		"description":	["Am Ende der Datei eingekommen?"],
		"body":	[
			"\tvar ${1:boolVal} := READ.IsAtEnd(${2:channelNo})",		]
	},
	"BLOCKFUNC: READ.IsOpen":	{
		"prefix":	"üîê  BlockFunc.READ.IsOpen",
		"description":	["Ist ein bestimmter Eingabekanal zum Lesen ge√∂ffnet?"],
		"body":	[
			"\tvar ${1:boolVal} := READ.IsOpen(${2:channelNo})",		]
	},
	"BLOCKFUNC: READ.NextCharacters":	{
		"prefix":	"üîê  BlockFunc.READ.NextCharacters",
		"description":	["Liefert die n√§chsten Zeichen aus einer ge√∂ffneten Datei. Leerstring, wenn keine solchen mehr vorhanden sind."],
		"body":	[
			"\tvar ${1:stringVal} := READ.NextCharacters(${2:channelNo}, ${3:nmbOfCharacters})",		]
	},
	"BLOCKFUNC: READ.NextLine":	{
		"prefix":	"üîê  BlockFunc.READ.NextLine",
		"description":	["Liefert die n√§chste Linie aus einer ge√∂ffneten Datei. Leerstring, wenn keine solche vorhanden ist."],
		"body":	[
			"\tvar ${1:stringVal} := READ.NextLine(${2:channelNo})",		]
	},
	"BLOCKFUNC: READ.Open":	{
		"prefix":	"üîê  BlockFunc.READ.Open",
		"description":	["Eingabekanal zum Lesen einer Datei √∂ffnen. Encoding wird automatisch anhand BOM bestimmt. Wenn kein BOM vorhanden ist, wird Datei mit UTF-8-Encoding eingelesen. R√ºckgabewert FALSE wenn √ñffnen nicht m√∂glich ist (oder Exception wenn mit entsprechendem Argument gefordert). Wenn √ñffnen abh√§ngig File-Security nicht erlaubt ist, f√ºhrt dies immer zu einer Exception!"],
		"body":	[
			"\tvar ${1:boolVal} := READ.Open(${2:channelNo}, ${3:filePath}, ${4:exceptionIfOpenNotPossible})",		]
	},
	"BLOCKFUNC: READ.OpenAnsi":	{
		"prefix":	"üîê  BlockFunc.READ.OpenAnsi",
		"description":	["Eingabekanal zum Lesen einer ANSI-Datei √∂ffnen. R√ºckgabewert FALSE wenn √ñffnen nicht m√∂glich ist (oder Exception wenn mit entsprechendem Argument gefordert). Wenn √ñffnen abh√§ngig File-Security nicht erlaubt ist, f√ºhrt dies immer zu einer Exception!"],
		"body":	[
			"\tvar ${1:boolVal} := READ.OpenAnsi(${2:channelNo}, ${3:filePath}, ${4:exceptionIfOpenNotPossible})",		]
	},
	"BLOCKFUNC: READ.OpenOem850":	{
		"prefix":	"üîê  BlockFunc.READ.OpenOem850",
		"description":	["Eingabekanal zum Lesen einer OEM-850-Datei √∂ffnen. R√ºckgabewert FALSE wenn √ñffnen nicht m√∂glich ist (oder Exception wenn mit entsprechendem Argument gefordert). Wenn √ñffnen abh√§ngig File-Security nicht erlaubt ist, f√ºhrt dies immer zu einer Exception!"],
		"body":	[
			"\tvar ${1:boolVal} := READ.OpenOem850(${2:channelNo}, ${3:filePath}, ${4:exceptionIfOpenNotPossible})",		]
	},
	"BLOCKFUNC: READ.OpenUtf16Le":	{
		"prefix":	"üîê  BlockFunc.READ.OpenUtf16Le",
		"description":	["Eingabekanal zum Lesen einer UTF-16LE-Datei (mit oder ohne BOM) √∂ffnen. R√ºckgabewert FALSE wenn √ñffnen nicht m√∂glich ist (oder Exception wenn mit entsprechendem Argument gefordert). Wenn √ñffnen abh√§ngig File-Security nicht erlaubt ist, f√ºhrt dies immer zu einer Exception!"],
		"body":	[
			"\tvar ${1:boolVal} := READ.OpenUtf16Le(${2:channelNo}, ${3:filePath}, ${4:exceptionIfOpenNotPossible})",		]
	},
	"BLOCKFUNC: READ.OpenUtf8":	{
		"prefix":	"üîê  BlockFunc.READ.OpenUtf8",
		"description":	["Eingabekanal zum Lesen einer UTF-8-Datei (mit oder ohne BOM) √∂ffnen. R√ºckgabewert FALSE wenn √ñffnen nicht m√∂glich ist (oder Exception wenn mit entsprechendem Argument gefordert). Wenn √ñffnen abh√§ngig File-Security nicht erlaubt ist, f√ºhrt dies immer zu einer Exception!"],
		"body":	[
			"\tvar ${1:boolVal} := READ.OpenUtf8(${2:channelNo}, ${3:filePath}, ${4:exceptionIfOpenNotPossible})",		]
	},
}
