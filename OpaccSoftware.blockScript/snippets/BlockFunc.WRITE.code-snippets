{
	"BLOCKFUNC: WRITE.Close":	{
		"prefix":	"üîê  BlockFunc.WRITE.Close",
		"description":	["Ge√∂ffneten Ausgabekanal schliessen."],
		"body":	[
			"WRITE.Close(${2:channelNo})",		]
	},
	"BLOCKFUNC: WRITE.GetLineCount":	{
		"prefix":	"üîê  BlockFunc.WRITE.GetLineCount",
		"description":	["Liefert Anzahl Linien welche in den Kanal geschrieben wurden = Anzahl 'WRITE.OutLine()'-Aufrufe."],
		"body":	[
			"\tvar ${1:numberVal} := WRITE.GetLineCount(${2:channelNo})",		]
	},
	"BLOCKFUNC: WRITE.IsOpen":	{
		"prefix":	"üîê  BlockFunc.WRITE.IsOpen",
		"description":	["Ist ein bestimmter Ausgabekanal zum Schreiben ge√∂ffnet?"],
		"body":	[
			"\tvar ${1:boolVal} := WRITE.IsOpen(${2:channelNo})",		]
	},
	"BLOCKFUNC: WRITE.OpenAnsi":	{
		"prefix":	"üîê  BlockFunc.WRITE.OpenAnsi",
		"description":	["Ausgabekanal zum Schreiben einer ANSI-Datei √∂ffnen. Standardm√§ssig wird allenfalls bestehende Datei √ºberschrieben."],
		"body":	[
			"WRITE.OpenAnsi(${2:channelNo}, ${3:filePath}, ${4:append})",		]
	},
	"BLOCKFUNC: WRITE.OpenOem850":	{
		"prefix":	"üîê  BlockFunc.WRITE.OpenOem850",
		"description":	["Ausgabekanal zum Schreiben einer OEM-850-Datei √∂ffnen. Standardm√§ssig wird allenfalls bestehende Datei √ºberschrieben."],
		"body":	[
			"WRITE.OpenOem850(${2:channelNo}, ${3:filePath}, ${4:append})",		]
	},
	"BLOCKFUNC: WRITE.OpenUtf16Le":	{
		"prefix":	"üîê  BlockFunc.WRITE.OpenUtf16Le",
		"description":	["Ausgabekanal zum Schreiben einer UTF-16LE-Datei (Little-Endian inkl. BOM) √∂ffnen. Standardm√§ssig wird allenfalls bestehende Datei √ºberschrieben."],
		"body":	[
			"WRITE.OpenUtf16Le(${2:channelNo}, ${3:filePath}, ${4:append})",		]
	},
	"BLOCKFUNC: WRITE.OpenUtf16LeWithoutBom":	{
		"prefix":	"üîê  BlockFunc.WRITE.OpenUtf16LeWithoutBom",
		"description":	["Ausgabekanal zum Schreiben einer UTF-16LE-Datei (Little-Endian ohne BOM) √∂ffnen. Standardm√§ssig wird allenfalls bestehende Datei √ºberschrieben."],
		"body":	[
			"WRITE.OpenUtf16LeWithoutBom(${2:channelNo}, ${3:filePath}, ${4:append})",		]
	},
	"BLOCKFUNC: WRITE.OpenUtf8":	{
		"prefix":	"üîê  BlockFunc.WRITE.OpenUtf8",
		"description":	["Ausgabekanal zum Schreiben einer UTF-8-Datei (inkl. BOM) √∂ffnen. Standardm√§ssig wird allenfalls bestehende Datei √ºberschrieben."],
		"body":	[
			"WRITE.OpenUtf8(${2:channelNo}, ${3:filePath}, ${4:append})",		]
	},
	"BLOCKFUNC: WRITE.OpenUtf8WithoutBom":	{
		"prefix":	"üîê  BlockFunc.WRITE.OpenUtf8WithoutBom",
		"description":	["Ausgabekanal zum Schreiben einer UTF-8-Datei (ohne BOM) √∂ffnen. Standardm√§ssig wird allenfalls bestehende Datei √ºberschrieben."],
		"body":	[
			"WRITE.OpenUtf8WithoutBom(${2:channelNo}, ${3:filePath}, ${4:append})",		]
	},
	"BLOCKFUNC: WRITE.Out":	{
		"prefix":	"üîê  BlockFunc.WRITE.Out",
		"description":	["Schreiben des √ºbergebenen Texts."],
		"body":	[
			"WRITE.Out(${2:channelNo}, ${3:text})",		]
	},
	"BLOCKFUNC: WRITE.OutLine":	{
		"prefix":	"üîê  BlockFunc.WRITE.OutLine",
		"description":	["Schreiben des √ºbergebenen Texts inkl. einem zus√§tzlichen Zeilenumbruch."],
		"body":	[
			"WRITE.OutLine(${2:channelNo}, ${3:text})",		]
	},
}
