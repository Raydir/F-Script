{
	"BLOCKFUNC: XSER.AddArg":	{
		"prefix":	"üîê  BlockFunc.XSER.AddArg",
		"description":	["Service-Argument hinzuf√ºgen."],
		"body":	[
			"XSER.AddArg(${2:xSerName}, ${3:serviceArg})",		]
	},
	"BLOCKFUNC: XSER.AddArgs":	{
		"prefix":	"üîê  BlockFunc.XSER.AddArgs",
		"description":	["Service-Argumente hinzuf√ºgen."],
		"body":	[
			"XSER.AddArgs(${2:xSerName}, ${3:serviceArgs})",		]
	},
	"BLOCKFUNC: XSER.AddRedoArgs":	{
		"prefix":	"üîê  BlockFunc.XSER.AddRedoArgs",
		"description":	["Redo-Argumente hinzuf√ºgen."],
		"body":	[
			"XSER.AddRedoArgs(${2:xSerName}, ${3:redoArgs})",		]
	},
	"BLOCKFUNC: XSER.AddRedoData":	{
		"prefix":	"üîê  BlockFunc.XSER.AddRedoData",
		"description":	["Redo-Daten hinzuf√ºgen."],
		"body":	[
			"XSER.AddRedoData(${2:xSerName}, ${3:redoDataAsString})",		]
	},
	"BLOCKFUNC: XSER.AppendArg":	{
		"prefix":	"üîê  BlockFunc.XSER.AppendArg",
		"description":	["Wert zum letzten Service-Argument hinzuf√ºgen. Fehler, wenn noch kein Argument vorhanden ist."],
		"body":	[
			"XSER.AppendArg(${2:xSerName}, ${3:argValueToAppend})",		]
	},
	"BLOCKFUNC: XSER.AppendArgByNo":	{
		"prefix":	"üîê  BlockFunc.XSER.AppendArgByNo",
		"description":	["Wert zu einem bestimmten Service-Argument (identifiziert anhand Nummer) hinzuf√ºgen. Fehler, wenn Argument noch nicht vorhanden ist."],
		"body":	[
			"XSER.AppendArgByNo(${2:xSerName}, ${3:oneBasedArgNo}, ${4:argValueToAppend})",		]
	},
	"BLOCKFUNC: XSER.Clear":	{
		"prefix":	"üîê  BlockFunc.XSER.Clear",
		"description":	["XSer-Objekt zur√ºcksetzen. Insbesondere adressierter Service und Argumente werden zur√ºckgesetzt. Objekt selber existiert jedoch weiterhin."],
		"body":	[
			"XSER.Clear(${2:xSerName})",		]
	},
	"BLOCKFUNC: XSER.Execute":	{
		"prefix":	"üîê  BlockFunc.XSER.Execute",
		"description":	["Service ausf√ºhren, Resultat in XRes speichern und 'Erfolgreich'-Info als R√ºckgabewert."],
		"body":	[
			"\tvar ${1:boolVal} := XSER.Execute(${2:xSerName}, ${3:xResName}, ${4:clientNo}, ${5:userNo}, ${6:password}, ${7:impersonateAs}, ${8:uiLangNo}, ${9:dataLangNo})",		]
	},
	"BLOCKFUNC: XSER.ExecuteToXFasDirectResponse":	{
		"prefix":	"üîê  BlockFunc.XSER.ExecuteToXFasDirectResponse",
		"description":	["Service ausf√ºhren, Resultat in 'XFAS-Direct-Response' zur√ºckgeben, Header-Infos auch via XRes mit Namen 'XFAS' verf√ºgbar und 'Erfolgreich'-Info als R√ºckgabewert liefern."],
		"body":	[
			"\tvar ${1:boolVal} := XSER.ExecuteToXFasDirectResponse(${2:xSerName}, ${3:clientNo}, ${4:userNo}, ${5:password}, ${6:impersonateAs}, ${7:uiLangNo}, ${8:dataLangNo})",		]
	},
	"BLOCKFUNC: XSER.GetArgByNo":	{
		"prefix":	"üîê  BlockFunc.XSER.GetArgByNo",
		"description":	["Liefert den Wert eines bestimmten Arguments. Fehler, wenn Argument nicht vorhanden ist."],
		"body":	[
			"\tvar ${1:stringVal} := XSER.GetArgByNo(${2:xSerName}, ${3:oneBasedArgNo})",		]
	},
	"BLOCKFUNC: XSER.GetNmbOfArgs":	{
		"prefix":	"üîê  BlockFunc.XSER.GetNmbOfArgs",
		"description":	["Liefert Anzahl der aktuell vorhandenen Argumente."],
		"body":	[
			"\tvar ${1:numberVal} := XSER.GetNmbOfArgs(${2:xSerName})",		]
	},
	"BLOCKFUNC: XSER.GetService":	{
		"prefix":	"üîê  BlockFunc.XSER.GetService",
		"description":	["Aktuell gesetzten Service-Port und -Namen abholen."],
		"body":	[
			"\tvar ${1:stringVal} := XSER.GetService(${2:xSerName})",		]
	},
	"BLOCKFUNC: XSER.IsDefined":	{
		"prefix":	"üîê  BlockFunc.XSER.IsDefined",
		"description":	["Ermittelt, ob ein bestimmtes Objekt existiert."],
		"body":	[
			"\tvar ${1:boolVal} := XSER.IsDefined(${2:xSerName})",		]
	},
	"BLOCKFUNC: XSER.SetArgByNo":	{
		"prefix":	"üîê  BlockFunc.XSER.SetArgByNo",
		"description":	["Bestimmtes Service-Argument (identifiziert anhand Nummer) setzen."],
		"body":	[
			"XSER.SetArgByNo(${2:xSerName}, ${3:oneBasedArgNo}, ${4:argValue})",		]
	},
	"BLOCKFUNC: XSER.SetArgs":	{
		"prefix":	"üîê  BlockFunc.XSER.SetArgs",
		"description":	["Service-Argumente setzen. Allf√§llig vormals vorhandene Argumente werden zur√ºckgesetzt."],
		"body":	[
			"XSER.SetArgs(${2:xSerName}, ${3:serviceArgs})",		]
	},
	"BLOCKFUNC: XSER.SetService":	{
		"prefix":	"üîê  BlockFunc.XSER.SetService",
		"description":	["XSer-Objekt f√ºr einen bestimmten Service-Aufruf erzeugen (falls n√∂tig). Allf√§llig vormals vorhandene Argumente bleiben erhalten."],
		"body":	[
			"XSER.SetService(${2:xSerName}, ${3:servicePortAndName})",		]
	},
	"BLOCKFUNC: XSER.SetServiceAndArgs":	{
		"prefix":	"üîê  BlockFunc.XSER.SetServiceAndArgs",
		"description":	["XSer-Objekt f√ºr einen bestimmten Service-Aufruf erzeugen (falls n√∂tig) und die √ºbergebenen Argumente setzen. Allf√§llig vormals vorhandene Argumente werden zur√ºckgesetzt."],
		"body":	[
			"XSER.SetServiceAndArgs(${2:xSerName}, ${3:servicePortAndName}, ${4:serviceArgs})",		]
	},
}
